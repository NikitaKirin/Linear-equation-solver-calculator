# Данный проект работает с матрицами следующей структуры:
# matrix = [
#   [1, 2, 4] - первая строка,
#   [2, 3, 4] - вторая строка,
#   и так далее..
# ]
import numpy as np


# Вспомогательная функция для вычисления детерминанта, принимающая на вход: матрицу, и индексы - расположение элемента
# в нашей матрице
def get_minor(matrix, i, j):
    # Берём только те элементы, которые расположены до и после строки и столбца текущего элемента
    return [row[:j] + row[j + 1:] for row in (matrix[:i] + matrix[i + 1:])]


# Основной метод для получения определителя
def get_determination(matrix):
    # Если матрица состоит из одной строки = одного элемента (матрица должна быть квадратной), то определителем
    # является значение этого элемента
    if len(matrix) == 1:
        return matrix[0][0]
    # Если матрица вида 2X2, то вычисляем определитель диагональным способом
    if len(matrix) == 2:
        return matrix[0][0] * matrix[1][1] - matrix[1][0] * matrix[0][1]
    result_determinant = 0  # Переменная для результата
    # Бежим по первой строке нашей матрицы и вычисляем результат
    for j in range(len(matrix)):
        result_determinant += ((-1) ** j) * matrix[0][j] * get_determination(get_minor(matrix, 0, j))

    return result_determinant


Z = np.random.random((10, 10))
print(Z)
